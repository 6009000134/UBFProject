//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Auctus.MiscShipmentBE.OAWorkflowService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="webservices.WorkflowServiceToOtherSystem.weaver.com.cn", ConfigurationName="OAWorkflowService.WorkflowServiceToOtherSystemPortType")]
    public interface WorkflowServiceToOtherSystemPortType {
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        string forceOverWorkflow(string in0, string in1, string in2);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<string> forceOverWorkflowAsync(string in0, string in1, string in2);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        string createWorkflow(string in0, string in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<string> createWorkflowAsync(string in0, string in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        string deleteWorkflow(string in0, string in1);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="out")]
        System.Threading.Tasks.Task<string> deleteWorkflowAsync(string in0, string in1);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface WorkflowServiceToOtherSystemPortTypeChannel : Auctus.MiscShipmentBE.OAWorkflowService.WorkflowServiceToOtherSystemPortType, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WorkflowServiceToOtherSystemPortTypeClient : System.ServiceModel.ClientBase<Auctus.MiscShipmentBE.OAWorkflowService.WorkflowServiceToOtherSystemPortType>, Auctus.MiscShipmentBE.OAWorkflowService.WorkflowServiceToOtherSystemPortType {
        
        public WorkflowServiceToOtherSystemPortTypeClient() {
        }
        
        public WorkflowServiceToOtherSystemPortTypeClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WorkflowServiceToOtherSystemPortTypeClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WorkflowServiceToOtherSystemPortTypeClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WorkflowServiceToOtherSystemPortTypeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string forceOverWorkflow(string in0, string in1, string in2) {
            return base.Channel.forceOverWorkflow(in0, in1, in2);
        }
        
        public System.Threading.Tasks.Task<string> forceOverWorkflowAsync(string in0, string in1, string in2) {
            return base.Channel.forceOverWorkflowAsync(in0, in1, in2);
        }
        
        public string createWorkflow(string in0, string in1) {
            return base.Channel.createWorkflow(in0, in1);
        }
        
        public System.Threading.Tasks.Task<string> createWorkflowAsync(string in0, string in1) {
            return base.Channel.createWorkflowAsync(in0, in1);
        }
        
        public string deleteWorkflow(string in0, string in1) {
            return base.Channel.deleteWorkflow(in0, in1);
        }
        
        public System.Threading.Tasks.Task<string> deleteWorkflowAsync(string in0, string in1) {
            return base.Channel.deleteWorkflowAsync(in0, in1);
        }
    }
}
